<?xml version="1.0" encoding="utf-8"?>

<!--
	NOTE 1
	make sure to include the default namespace so that visual studio
	will turn on intellisense for this nant build file 
	
	NOTE 2
	for non .NET developers: for all intents and purpose a solution in 
	VisualStudio (VS) is the same thing as a top-level project in most other
	languages, and VS project is the same as a package. in order to make it 
	easier for communicate amonst .NET developers working with both VS and
	NAnt, this NAnt build file will refer to the top-level project as a solution
	and packages as projects.
-->
<project name="dotnetcli" 
		 xmlns="http://nant.sf.net/nightly/2008-06-02-0.86/nant.xsd">
	
	<!-- *********************** SOLUTION PROPERTIES *********************** -->
	
	<!-- the descriptive title of the solution -->
	<property name="sol.title" value=".NET CLI"/>

	<!-- 
		the solution's name. this is generally in the unix format (short)
	-->
	<property name="sol.name" value="dotnetcli"/>

	<!-- the solution's name in standard unix format (think short) -->
	<property name="sol.name.unix" value="${sol.name}"/>

	<!-- the solution's version -->
	<property name="sol.version" value="0.1.1" />

	<!-- the author of the solution -->
	<property name="sol.author" value="Schley Andrew Kutz"/>

	<!-- *********************** SOLUTION PROPERTIES *********************** -->

	
	<!-- *************************** DIRECTORIES *************************** -->

	<!-- directory for configuration files -->
	<property name="conf" value="conf"/>
	
	<!-- directory for distribution files -->
	<property name="dist" value="dist"/>

	<!-- directory for documentation files -->
	<property name="docs" value="docs"/>

	<!-- directory for build output -->
	<property name="build" value="build"/>

	<!-- directory for source files -->
	<property name="src" value="src"/>

	<!-- directory for unit tests -->
	<property name="test" value="test"/>
	
	<!-- directory for resource and localization files -->
	<property name="res" value="res"/>
	
	<!-- directory for libraries -->
	<property name="lib" value="lib"/>

	<!-- *************************** DIRECTORIES *************************** -->

	<!-- ***************************** PROJECT ***************************** -->

	<!--
		it may seem odd to set project properties in the global properties file,
		but all the properties either derive from project::get-name() or can be
		overriden in a project's properties file. when the project::get-name()
		function is invoked, it looks at the name of the project that the 
		properties file is being included in. for example, if this properties
		file were included in a project whose name was foo.test, the function
		would return foo.test, even if the name attribute of this properties
		file is set to default.properties. this is a handy feature for locating
		project specific properties that relate to the project name in a central
		location
	-->
	<!-- project properties -->
	<property name="proj.name" value="${project::get-name()}"/>

	<!-- 
		the unix (short) name of a project. this value should be overriden
		in a project's nant build file if the project is not the default 
		project for a solution, ex. a unit test project should append the
		'.test' suffix to this value
	-->
	<if test="${string::ends-with(proj.name, sol.name)}">
		<property name="proj.name.unix" value="${sol.name.unix}"/>
	</if>

	<!-- 
		contstruct the project's unix name by getting the part of its
		project name that occurs after the occurence of the solution name
		and then adding that to the solution name as a suffix. ex. if the
		solution name is vitfordotnet and the project name is 
		net.sf.vitfordotnet.test then this code will remove vitfordotnet from
		the project name leaving net.sf..test. then the code will key on the
		'..' occurrence and decide that the 'test' is the remainder and append
		it to the solution's name to result in vitfordotnet.test. thus the
		project name is vitfordotnet.test.
	-->
	<if test="${not string::ends-with(proj.name, sol.name)}">

		<!-- 
			remove the solution name from the project name. this will result
			in a double period (..) in the tmp1 variable, something we can key on
			to get the remainder of the string 
		-->
		<property name="tmp1"
				  value="${string::replace(proj.name, sol.name, '')}"/>

		<!-- get the index of the '..' in the string -->
		<property name="tmp2"
				  value="${string::index-of(tmp1, '..')}" />

		<!-- 
			do lots of string manipulation. see above comment for this section.
		-->
		<property name="proj.name.unix"
				  value="${sol.name}.${string::substring(tmp1, int::parse(tmp2)+2,string::get-length(tmp1)-int::parse(tmp2)-2)}"/>
	</if>

	<property name="proj.author" value="${sol.author}"/>
	<property name="proj.version" value="${sol.version}"/>

	<!-- the name of a unit test project's corresponding source project -->
	<property name="proj.srcproj.name"
			  value="${string::replace(proj.name, '.test', '')}"/>

	<!-- 
		the unix (short) name of a unit test project's corresponding source project 
	-->
	<property name="proj.srcproj.name.unix"
			  value="${string::replace(proj.name.unix, '.test', '')}"/>

	<!-- the path to a unit test project's corresponding source project -->
	<property name="proj.srcproj.path"
			  value="../../${src}/${proj.srcproj.name}"/>

	<!-- 
		the path to a unit test project's corresponding source project's output
		assembly. this defaults to a library (dll), so this property must be
		overriden locally if the source project does not emit a library
		assembly
	-->
	<property name="proj.srcproj.output"
			  value="${proj.srcproj.path}/${build}/${proj.srcproj.name.unix}-${proj.version}.dll"/>

	<!-- ***************************** PROJECT ***************************** -->

	<!-- ******************************* LIB ******************************* -->

	<!-- NUnit -->
	<property name="lib.nunit" value="null" />
	<if test="${environment::variable-exists('LIB_DOTNET_NUNIT')}">
		<property
			name="lib.nunit"
			value="${environment::get-variable('LIB_DOTNET_NUNIT')}/nunit.framework.dll" />
	</if>
	<if test="${not environment::variable-exists('LIB_DOTNET_NUNIT')}">
		<property
			name="lib.nunit"
			value="../../${lib}/nunit-2.4.6-net-2.0/bin/nunit.framework.dll" />
	</if>
	
	<!-- default includes -->
	<patternset id="lib.default">
		<!-- include everything in a project's lib directory -->
		<include name="${lib}/*.dll"/>
	</patternset>

	<!-- 
		default includes for zip task - we must go up a directory since the 
		base directory in the zip task is set to one directory below the 
		project's build directory
	-->
	<patternset id="lib.default-for-zip">
		<!-- include everything in a project's lib directory -->
		<include name="../${lib}/*.dll"/>
	</patternset>
	<!-- ******************************* LIB ******************************* -->
	
</project>